{
  "version": 3,
  "sources": ["../../.pnpm/@nanostores+logger@0.4.0_nanostores@0.10.3/node_modules/@nanostores/logger/build-creator-logger/index.js", "../../.pnpm/@nanostores+logger@0.4.0_nanostores@0.10.3/node_modules/@nanostores/logger/build-logger/index.js", "../../.pnpm/@nanostores+logger@0.4.0_nanostores@0.10.3/node_modules/@nanostores/logger/printer/index.js", "../../.pnpm/@nanostores+logger@0.4.0_nanostores@0.10.3/node_modules/@nanostores/logger/logger/index.js", "../../.pnpm/@nanostores+logger@0.4.0_nanostores@0.10.3/node_modules/@nanostores/logger/creator-logger/index.js"],
  "sourcesContent": ["function onBuild(creator, listener) {\n  let originBuild = creator.build\n  creator.build = (...args) => {\n    let store = originBuild(...args)\n    listener(store)\n    return store\n  }\n  return () => {\n    creator.build = originBuild\n  }\n}\n\nconst defaultNameGetter = (creatorName, store) => {\n  return `${creatorName}:${store.value.id}`\n}\n\nexport function buildCreatorLogger(creator, creatorName, events, opts = {}) {\n  opts = {\n    nameGetter: defaultNameGetter,\n    ...opts\n  }\n\n  let messages = opts.messages || {}\n  let unbind = []\n\n  if (messages.build !== false) {\n    unbind.push(\n      onBuild(creator, store => {\n        let storeName = opts.nameGetter(creatorName, store)\n        events.build({ creatorName, store, storeName })\n      })\n    )\n  }\n\n  return () => {\n    for (let i of unbind) i()\n  }\n}\n", "import { onMount, onNotify, onSet } from 'nanostores'\n\nconst isAtom = store => store.setKey === undefined\nconst isDeepMapKey = key => /.+(\\..+|\\[\\d+\\.*])/.test(key)\n\nfunction handleMount(store, storeName, messages, events) {\n  return onMount(store, () => {\n    if (messages.mount !== false) {\n      events.mount({ storeName })\n    }\n    return () => {\n      if (messages.unmount !== false) {\n        events.unmount({ storeName })\n      }\n    }\n  })\n}\n\nfunction handleSet(store, storeName, events) {\n  return onSet(store, ({ changed }) => {\n    let oldValue = isAtom(store) ? store.value : { ...store.value }\n    oldValue = isDeepMapKey(changed) ? structuredClone(oldValue) : oldValue\n    let unbindNotify = onNotify(store, () => {\n      let newValue = store.value\n      let valueMessage\n      if (changed && !isDeepMapKey(changed)) {\n        valueMessage = `${oldValue[changed]} → ${newValue[changed]}`\n      }\n\n      events.change({\n        changed,\n        newValue,\n        oldValue,\n        storeName,\n        valueMessage\n      })\n\n      unbindNotify()\n    })\n  })\n}\n\nexport function buildLogger(store, storeName, events, opts = {}) {\n  let messages = opts.messages || {}\n  let unbind = []\n\n  if (messages.mount !== false || messages.unmount !== false) {\n    unbind.push(handleMount(store, storeName, messages, events))\n  }\n\n  if (messages.change !== false) {\n    unbind.push(handleSet(store, storeName, events))\n  }\n\n  return () => {\n    for (let i of unbind) i()\n  }\n}\n", "function badge(color) {\n  return `\n    padding: 0 5px 2px;\n    margin-right: 5px;\n    font-weight: 400;\n    color: white;\n    background-color: ${color};\n  `\n}\n\nfunction borders(full) {\n  return `border-radius: ${full ? '4px' : '0 4px 4px 0'};`\n}\n\nconst STYLES = {\n  badges: {\n    arguments: badge('#007281'),\n    build: badge('#BB5100'),\n    change: badge('#0E8A00'),\n    error: badge('#C30000'),\n    mount: badge('#0059D1'),\n    new: badge('#0C7800'),\n    old: badge('#943636'),\n    unmount: badge('#5E5E5E'),\n    value: badge('#8A6F00')\n  },\n  bold: 'font-weight: 700;',\n  logo: `\n    padding: 0 5px 2px;\n    color: white;\n    background-color: black;\n    border-radius: 4px 0 0 4px;\n  `,\n  regular: 'font-weight: 400;'\n}\n\nfunction createLog({ logo, message, type, value }) {\n  let template = ''\n  let args = []\n\n  if (logo) {\n    template = `%c𝖓`\n    args.push(STYLES.logo)\n  }\n\n  if (typeof type === 'string') {\n    template += `%c${type}`\n    args.push(STYLES.badges[type] + borders(!logo))\n  } else if (typeof type === 'object') {\n    template += `%c${type.name.toLowerCase()}`\n    args.push(badge(type.color) + borders(!logo))\n  }\n\n  if (message) {\n    if (Array.isArray(message)) {\n      message.forEach(([style, text]) => {\n        template += `%c ${text}`\n        args.push(STYLES[style])\n      })\n    } else {\n      template += `%c ${message}`\n      args.push(STYLES.text)\n    }\n  }\n\n  if (value) {\n    args.push(value)\n  }\n\n  args.unshift(template)\n\n  return args\n}\n\nexport const log = args => console.log(...createLog(args))\nexport const group = args => console.groupCollapsed(...createLog(args))\nexport const groupEnd = () => console.groupEnd()\n", "import { buildLogger } from '../build-logger/index.js'\nimport { group, groupEnd, log } from '../printer/index.js'\n\nfunction createLogger(store, storeName, opts) {\n  return buildLogger(\n    store,\n    storeName,\n    {\n      change: ({ changed, newValue, oldValue, valueMessage }) => {\n        let groupLog = {\n          logo: true,\n          message: [\n            ['bold', storeName],\n            ['regular', 'store was changed']\n          ],\n          type: 'change'\n        }\n        if (changed) {\n          groupLog.message.push(\n            ['regular', 'in the'],\n            ['bold', changed],\n            ['regular', 'key']\n          )\n        }\n        group(groupLog)\n        if (valueMessage) {\n          log({\n            message: valueMessage,\n            type: 'value'\n          })\n        }\n        log({\n          type: 'new',\n          value: newValue\n        })\n        if (oldValue) {\n          log({\n            type: 'old',\n            value: oldValue\n          })\n        }\n        groupEnd()\n      },\n\n      mount: () => {\n        log({\n          logo: true,\n          message: [\n            ['bold', storeName],\n            ['regular', 'store was mounted']\n          ],\n          type: 'mount'\n        })\n      },\n\n      unmount: () => {\n        log({\n          logo: true,\n          message: [\n            ['bold', storeName],\n            ['regular', 'store was unmounted']\n          ],\n          type: 'unmount'\n        })\n      }\n    },\n    opts\n  )\n}\n\nexport function logger(stores, opts = {}) {\n  let unbind = Object.entries(stores).map(([storeName, store]) =>\n    createLogger(store, storeName, opts)\n  )\n  return () => {\n    for (let i of unbind) i()\n  }\n}\n", "import { buildCreatorLogger } from '../build-creator-logger/index.js'\nimport { logger } from '../logger/index.js'\nimport { log } from '../printer/index.js'\n\nfunction createCreatorLogger(creator, creatorName, opts) {\n  let unbind = []\n\n  unbind.push(\n    buildCreatorLogger(\n      creator,\n      creatorName,\n      {\n        build: ({ store, storeName }) => {\n          log({\n            logo: true,\n            message: [\n              ['bold', storeName],\n              ['regular', 'store was built by'],\n              ['bold', creatorName],\n              ['regular', 'creator']\n            ],\n            type: 'build'\n          })\n\n          unbind.push(logger({ [storeName]: store }, opts))\n        }\n      },\n      opts\n    )\n  )\n\n  return () => {\n    for (let i of unbind) i()\n  }\n}\n\nexport function creatorLogger(creators, opts = {}) {\n  let unbind = Object.entries(creators).map(([creatorName, creator]) =>\n    createCreatorLogger(creator, creatorName, opts)\n  )\n  return () => {\n    for (let i of unbind) i()\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
